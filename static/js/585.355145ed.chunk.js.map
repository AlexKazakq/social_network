{"version":3,"file":"static/js/585.355145ed.chunk.js","mappings":"iNAOaA,EAAe,WACxB,OACI,0BACI,SAACC,EAAD,OAKNA,EAAW,WAEb,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAY/D,OAVAI,EAAAA,EAAAA,YAAU,WAGN,OADAN,GAASO,EAAAA,EAAAA,OACF,WAEHP,GAASQ,EAAAA,EAAAA,UAEd,KAIC,2BACgB,UAAXN,IAAsB,2EACvB,iCACI,SAACO,EAAD,KACA,SAACC,EAAD,WAMVD,EAAe,WACjB,IAAME,GAAoBC,EAAAA,EAAAA,QAAuB,MAC3CC,GAAWV,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKQ,YACjE,GAAwDC,EAAAA,EAAAA,WAAS,GAAjE,eAAOC,EAAP,KAA6BC,EAA7B,KAkBA,OAPAV,EAAAA,EAAAA,YAAU,WAEqB,IAAD,EAAtBS,IACA,UAAAJ,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACN,KAGA,iBAAKO,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAjBhC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAwBC,GAAwB,GAEjDD,GAAwBC,GAAwB,IAYpD,UACKH,EAASmB,KAAI,SAACC,EAAGC,GAAJ,OAAU,SAACC,EAAD,CAAwBC,QAASH,GAAfA,EAAEI,QAC5C,gBAAKC,IAAK3B,QAKhBwB,GAAmDI,EAAAA,EAAAA,OAAK,YAAgB,IAAdH,EAAa,EAAbA,QAC5D,OACI,4BACI,gBAAKI,IAAKJ,EAAQK,MAAOrB,MAAO,CAACsB,MAAO,UAD5C,KACuD,uBAAIN,EAAQO,YAC/D,mBACA,uBAAIP,EAAQA,WACZ,wBAKN1B,EAAyB,WAC3B,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOsB,EAAP,KAAgBQ,EAAhB,KACM5C,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OACI,4BACI,0BAAK,qBAAU2C,SAAU,SAACrB,GACtBoB,EAAWpB,EAAEE,cAAcoB,QAC5BA,MAAOV,OACV,0BACI,mBAAQW,SAAqB,UAAX7C,EAAoB8C,QAdvB,WAClBZ,IAILpC,GAASiD,EAAAA,EAAAA,IAAYb,IACrBQ,EAAW,MAQH","sources":["pages/chat/ChatPage.tsx"],"sourcesContent":["import {FC, memo, useEffect, useRef, useState} from \"react\";\r\nimport {ChatMessageAPIType} from \"../../API/chatAPI\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nexport const ChatPage: FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Chat: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        // @ts-ignore\r\n        dispatch(startMessagesListening());\r\n        return () => {\r\n            // @ts-ignore\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {status === \"error\" && <div>Some error occurred. Please refresh the page</div>}\r\n            <>\r\n                <Messages/>\r\n                <AddMessageChatForm/>\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages: FC = () => {\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const [isAutoScrollIsActive, setIsAutoScrollIsActive] = useState(false)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScrollIsActive && setIsAutoScrollIsActive(true)\r\n        } else {\r\n            isAutoScrollIsActive && setIsAutoScrollIsActive(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        if (isAutoScrollIsActive) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div style={{height: \"400px\", overflowY: \"auto\"}} onScroll={scrollHandler}>\r\n            {messages.map((m, i) => <ChatMessage key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ChatMessage: FC<{ message: ChatMessageAPIType }> = memo(({message}) => {\r\n    return (\r\n        <div>\r\n            <img src={message.photo} style={{width: \"30px\"}}/> <b>{message.userName}</b>\r\n            <br/>\r\n            <b>{message.message}</b>\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageChatForm: FC = () => {\r\n    const [message, setMessage] = useState(\"\")\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n    debugger\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        // @ts-ignore\r\n        dispatch(sendMessage(message))\r\n        setMessage(\"\")\r\n    }\r\n    return (\r\n        <div>\r\n            <div><textarea onChange={(e) => {\r\n                setMessage(e.currentTarget.value)\r\n            }} value={message}></textarea></div>\r\n            <div>\r\n                <button disabled={status === \"ready\"} onClick={sendMessageHandler}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"names":["ChatPage","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageChatForm","messagesAnchorRef","useRef","messages","useState","isAutoScrollIsActive","setIsAutoScrollIsActive","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","i","ChatMessage","message","id","ref","memo","src","photo","width","userName","setMessage","onChange","value","disabled","onClick","sendMessage"],"sourceRoot":""}