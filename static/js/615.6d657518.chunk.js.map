{"version":3,"file":"static/js/615.6d657518.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCKnKA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCLzBC,EAAU,SAACP,GACpB,OACI,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMQ,W,6BC0BtCC,GAAcC,EAAAA,EAAAA,GAAiB,IAe7BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAbL,SAACZ,GACpB,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACKC,EAAAA,EAAAA,IAA0C,qBAAsB,iBAAkB,CAACC,EAAAA,EAAeR,GAAcS,EAAAA,OAErH,0BACI,6C,+DClCVC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCM3B,IAcA,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACJ,GACnB,MAAO,CACHK,YAAaL,EAAMK,eAaE,CAACC,mBAAAA,EAAAA,KDjBvB,SAA8BC,GASjC,OAFiCH,EAAAA,EAAAA,IAAQL,EAARK,EANP,SAACxB,GACvB,IAAKqB,EAAwBrB,EAAxBqB,OAAWO,GAAhB,OAA6B5B,EAA7B,GACA,OAAKqB,GACE,SAACM,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUvB,GAAI,gBCa1C,EFpBuB,SAACL,GACpB,IAAIoB,EAAQpB,EAAMyB,YAEdI,EAAkBT,EAAMU,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACjC,EAAD,CAAYO,KAAM0B,EAAE1B,KAAiBJ,GAAI8B,EAAE9B,IAAZ8B,EAAE9B,OAC1E+B,EAAmBb,EAAMc,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC5B,EAAD,CAAoBC,QAAS2B,EAAE3B,SAAjB2B,EAAEjC,OAM/D,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKyB,KAEL,gBAAK1B,UAAWC,EAAAA,SAAhB,UACI,yBAAM6B,OAEV,SAACtB,EAAD,CAAqBG,SAZP,SAACsB,GACnBpC,EAAM0B,mBAAmBU,EAAOC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRiderect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__H5v5+\",\"dialogsItems\":\"Dialogs_dialogsItems__iumHU\",\"active\":\"Dialogs_active__D8u2D\",\"messages\":\"Dialogs_messages__iNOj8\",\"message\":\"Dialogs_message__k2TLP\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\nexport const DialogItem = (props: DialogsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {MessagesType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\n\r\nexport const Message = (props: MessagesType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {InjectedFormProps} from \"redux-form/lib/reduxForm\";\r\n\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {createField, Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {DialogsInitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\nexport const Dialogs = (props: DialogsFromContainerType) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        props.sendMessageCreator(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nlet maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>('Enter your message', 'newMessageBody', [requiredField, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\ntype DialogsFromContainerType = {\r\n    dialogsPage: DialogsInitialStateType\r\n    sendMessageCreator: (values: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\ntype NewMessageFormValuesKeysType = Extract<keyof FormDataType, string>\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>){\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {DialogsInitialStateType, sendMessageCreator,} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRiderect\";\r\n\r\n//\r\n// type MapDispatchPropsType = {\r\n//     onSendMessage: (newMessageBody: string) => void\r\n// }\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsInitialStateType\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch):MapDispatchPropsType => {\r\n//     return {\r\n//         onSendMessage: (newMessageBody: string) => {\r\n//             dispatch(sendMessageCreator(newMessageBody))\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {sendMessageCreator}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n"],"names":["DialogItem","props","path","id","className","s","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","requiredField","Textarea","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPage","sendMessageCreator","Component","restProps","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","newMessageBody"],"sourceRoot":""}