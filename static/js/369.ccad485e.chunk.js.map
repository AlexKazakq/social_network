{"version":3,"file":"static/js/369.ccad485e.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Posts/Post.module.css?5aca","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2XdJx\",\"mainPhoto\":\"ProfileInfo_mainPhoto__XfMvC\",\"contact\":\"ProfileInfo_contact__5-BmK\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatue] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatue(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditeMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatusThunk(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input autoFocus onBlur={deactivateEditeMode} onChange={onStatusChange} value={status}></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport styleError from '../../../components/common/FormsControls/FormsControls.module.css'\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileFormDataType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({handleSubmit, profile, error}) => {\r\n    return (<form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>save</button>\r\n        </div>\r\n        {error &&\r\n            <div className={styleError.formSummaryError}>\r\n                {error}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>Full Name</b>: {createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField<ProfileTypeKeys>('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n        <div>\r\n            <b>About me</b>: {createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => <div key={key} className={s.contact}>\r\n            <b>{key}</b>: {createField(key, 'contacts.' + key, [], Input)}\r\n        </div>)}\r\n        </div>\r\n    </form>)\r\n}\r\n\r\n\r\n// @ts-ignore\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport type ProfileFormDataType = {\r\n    fullName: string,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    aboutMe: string\r\n}\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = Extract<keyof ProfileType, string>","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatusThunk, isOwner, savePhoto, saveProfile}: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        saveProfile(profile).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={()=> setEditMode(true)}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatusThunk={updateStatusThunk}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataPropsType) => {\r\n    return (<div>\r\n        { isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full Name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>)}\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\ntype ContactPropsType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType,\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__3e4Ds\",\"posts\":\"MyPosts_posts__6EdvY\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__+LDvX\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\nimport {PostType} from \"../../../../types/types\";\r\n\r\nexport const Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://www.kino-teatr.ru/movie/kadr/36398/pv_82325.jpg\" alt=\"\"/>\r\n            {props.message}\r\n            <div><span>{props.likesCount} likes</span></div>\r\n        </div>\r\n    )\r\n}","import React, {memo} from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Posts/Post\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {InjectedFormProps} from \"redux-form/lib/reduxForm\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {createField, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport const MyPosts = memo((props: MyPostsCallBackType) => {\r\n    let postsElement = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onAddPostButtonHandler = (values: FormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPostButtonHandler}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm = (props: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<MyPostFormValuesTypeKeys>('Post message', 'newPostText', [requiredField, maxLength10], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n                <button>Remove</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\ntype MyPostFormValuesTypeKeys = Extract<keyof FormDataType, string>\r\n\r\nexport type MyPostsCallBackType = {\r\n    posts: PostType[]\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}","import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void,\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatusThunk={props.updateStatusThunk}\r\n                         saveProfile={props.saveProfile}\r\n                         savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusThunk,\r\n    getUserProfileThunk,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatusThunk\r\n} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nexport class ProfileAPIComponent extends React.Component<ProfileContainerPropsType & PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n            this.props.getUserProfileThunk(userId as number)\r\n            this.props.getStatusThunk(userId as number)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<PropsType>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatusThunk={this.props.updateStatusThunk}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileThunk, getStatusThunk, updateStatusThunk, savePhoto, saveProfile}),\r\n    withRouter\r\n)\r\n(ProfileAPIComponent);\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunk: (userId: number) => void\r\n    getStatusThunk: (userId: number) => void\r\n    updateStatusThunk: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatue","useEffect","onDoubleClick","autoFocus","onBlur","updateStatusThunk","onChange","e","currentTarget","value","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","styleError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","ProfileInfo","isOwner","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","target","files","length","initialValues","formData","then","ProfileData","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","Post","alt","message","likesCount","MyPosts","memo","postsElement","posts","p","id","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","requiredField","MyPostContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileAPIComponent","userId","this","match","params","authorizedUserId","history","push","getUserProfileThunk","getStatusThunk","refreshProfile","prevProps","prevState","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}